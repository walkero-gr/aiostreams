@database "aiostreams.guide"
@author "George (walkero) Sokianos"
@$VER: VERSION_TAG (RELEASE_DATE)
@wordwrap
@node "MAIN" "aiostreams"
@next "Requirements"
@{jcenter}
    _    ___ ___      _                                
   / \\  |_ _/ _ \\ ___| |_ _ __ ___  __ _ _ __ ___  ___ 
  / _ \\  | | | | / __| __| '__/ _ \\/ _` | '_ ` _ \\/ __|
 / ___ \\ | | |_| \\__ \\ |_| | |  __/ (_| | | | | | \\__ \\
/_/   \\_\\___\\___/|___/\\__|_|  \\___|\\__,_|_| |_| |_|___/

@{b}All In One streams@{ub}
@{i}VERSION_TAG (RELEASE_DATE)@{ui}
@{jleft}@{lindent 3}@{rindent 3}
All In One streams (aiostreams) is a pack of scripts, written in Python, that can be used to stream and watch videos from different online networks, like Twitch.tv and lbry.tv. Also, there is a radio script that helps you discover and play online radio stations from all around the world.

All the scripts should be used from the shell, as well as from any web browser that support execution of scripts. It is really easy to configure a link context menu and open the URL with the script. And if "Autoplay" is enabled, then the video will start automatically using the configured default players.

Some of these networks have a search API, and you can use them to find available streams and videos, without the need to visit the website. This is a fast way to find what you want, without waiting huge amount of Javascript to be executed on your machine. Especially useful when your computer doesn't have the necessary horse power to support those websites.

@{lindent 15}@{settabs 10}
@{"Requirements" LINK "Requirements"}
@{"Installation" LINK "Installation"}
@{"Configure" LINK "Configure"}
@{"Shell usage" LINK "Usage"}
@{tab}@{"Twitch.tv" LINK "Twitch.tv"}
@{tab}@{"YouTube.com" LINK "YouTube.com"}
@{tab}@{"Vimeo.com" LINK "Vimeo.com"}
@{tab}@{"Dailymotion.com" LINK "Dailymotion.com"}
@{tab}@{"PeerTube" LINK "PeerTube"}
@{tab}@{"Wasd.tv" LINK "Wasd.tv"}
@{tab}@{"Radio" LINK "Radio"}
@{"Todo List" LINK "Todo"}
@{"Changelog" LINK "Changelog"}
@{"Troubleshooting" LINK "Troubleshooting"}
@{"Author" LINK "Author"}

@endnode
@node "Requirements" "Requirements"
@prev "MAIN"
@next "Installation"
@{jleft}@{lindent 3}
@{b}Requirements@{ub}

The scripts are based on Python v2.5, so this is absolutely necessary to be installed at your system.

All the scripts are developed and fully tested under AmigaOS 4.1 FE and MorphOs 3.11. There will be support for other systems in the future, like AmigaOS 3 and AROS, as long as Python is supported. 

The scripts work just fine under Linux and MacOS X, but those systems are not the target of this project. There are other solutions that might do a better job.

@{u}A full list of requirements per OS:@{uu}

@{b}AmigaOS 4.1@{ub}
* AmigaOS 4.1 FE upd1 installed
* Python 2.5
* pythonssl_amissl5 @{" 1 " SYSTEM "c:URLOpen https://os4depot.net/?function=showfile&file=library/misc/pythonssl_amissl5.lha"}
* ffplay for the online live streaming videos, or something equivalent. @{" 2 " SYSTEM "c:URLOpen http://os4depot.net/?function=showfile&file=video/convert/ffmpeg.lha"}
* mplayer for the online recorded videos, or something equivalent. @{" 3 " SYSTEM "c:URLOpen http://os4depot.net/index.php?function=search&tool=simple&f_fields=mplayer"}
* internet access

Links
[1] https://os4depot.net/?function=showfile&file=library/misc/pythonssl_amissl5.lha
[2] http://os4depot.net/?function=showfile&file=video/convert/ffmpeg.lha
[3] http://os4depot.net/index.php?function=search&tool=simple&f_fields=mplayer

@{b}MorphOS 3.x@{ub}
* MorphOS 3.10 and above
* Python 2.5 and above
* Currently there is no suitable video player available on MorphOS, that could support the necessary streams. As soon as new video players are available, they can be used by aiostreams scripts.
* internet access

@endnode
@node "Installation" "Installation"
@prev "Requirements"
@next "Configure"
@{jleft}@{lindent 3}
@{b}Installation@{ub}

@{u}AmigaOS 4.1 FE upd1@{uu}
* Download and install @{"pythonssl_amissl5" SYSTEM "c:URLOpen https://os4depot.net/?function=showfile&file=library/misc/pythonssl_amissl5.lha"} on your system.
* Download and install @{"ffmpeg" SYSTEM "c:URLOpen http://os4depot.net/?function=showfile&file=video/convert/ffmpeg.lha"} package on your system.
* Download and install @{"mplayer" SYSTEM "c:URLOpen http://os4depot.net/index.php?function=search&tool=simple&f_fields=mplayer"} package on your system.
* Unarchive the aiostreams file wherever you want. 

@{u}MorphOS@{uu}
* Download and install Python using @{"Grunch" SYSTEM "c:openurl URL='http://geit.de/eng_grunch.html'"} (http://geit.de/eng_grunch.html)
* Unarchive the aiostreams file wherever you want. 

@{u}Assign@{uu}
For your convenience I suggest to create an assign to the folder where you extracted aiostreams. This can be done with the following added in your user-startup

;BEGIN aiostreams
Assign aiostreams: "Work:Video/aiostreams"
;END aiostreams

This assign is used by my scripts wherever it is needed. So if you do not want to edit the scripts to add your path to make them work, please add that assign.
If you don't do it, the first time a script looks for that assign, a requester will show up.

@{u}Have in mind@{uu}
aiostreams scripts will work even from temporary mounted storage drives, i.e. USB, CDRom or RAM. The scripts do not write anything to the disk, so they don't even need the storage to be writable.

@endnode
@node "Configure" "Configure"
@prev "Installation"
@next "Usage"
@{jleft}@{lindent 3}
@{b}Configure@{ub}

In aiostreams folder you will find a configuration file named @{b}cfg.py@{ub}. You can edit it and change a few parameters, so that it will be suitable for you.
Consult the @{b}cfg.py.examples@{ub} file where you can find examples on how to set different players on other operating systems.

The available parameters are:
* @{b}autoplay:@{ub} Set this to @{i}True@{ui} to enable autoplay of the video with your preffered video player. Set it to @{i}False@{ui} to disable it.
* @{b}verbose:@{ub} Set this to @{i}True@{ui} to get more info from the script during the execution. Set it to @{i}False@{ui} to disable it.
* @{b}vPlayer:@{ub} Set the path to your preffered video player. This is going to be used on recorded streams only. This is used only if @{b}autoplay@{ub} is set to @{i}True@{ui}.
* @{b}vPlayerArgs:@{ub} Set the arguments that are going to be used with your preffered video player. This is used only if @{b}autoplay@{ub} is set to @{i}True@{ui}.
* @{b}sPlayer:@{ub} Set the path to your preffered video player. This is going to be used mostly on live streams, but depending the network, might be used on recorder streams as well. This is used only if @{b}autoplay@{ub} is set to @{i}True@{ui}.
* @{b}sPlayerArgs:@{ub} Set the arguments that are going to be used with your preffered streaming player. This is used only if @{b}autoplay@{ub} is set to @{i}True@{ui}.


You will also find a file named @{b}vqw.py@{ub}. There are the video qualities for each network. You can set the order of the stream and video qualities, which means that the first available will be served.

* @{b}twitchVQW:@{ub} Set the preffered sort of video qualities for the Twitch.tv network.
* @{b}vimeoVQW:@{ub} Set the preffered sort of video qualities for the Vimeo.com network.
* @{b}dailymotionVQW:@{ub} Set the preffered sort of video qualities for the Dailymotion.com network.
* @{b}ytVQW:@{ub} Set the preffered sort of video qualities for the recorded videos from YouTube.com.
* @{b}ytLiveVQW:@{ub} Set the preffered sort of video qualities for the Live videos from YouTube.com.
* @{b}peertubeVQW:@{ub} Set the preffered sort of video qualities for the PeerTube instances.
* @{b}wasdVQW:@{ub} Set the preffered sort of video qualities for the Wasd.tv network.

@endnode
@node "Usage" "Shell usage"
@prev "Configure"
@next "Twitch.tv"
@{jleft}@{lindent 3}
@{b}Shell usage@{ub}

All the scripts have a common way of usage, and I am trying to keep it that way, so there can be a consistency. But scripts might have different features depending the suported network. 

You can find usage information in the following sections, separated by network.
@{lindent 10}
@{"Twitch.tv" LINK "Twitch.tv"}
@{"Vimeo.com" LINK "Vimeo.com"}
@{"YouTube.com" LINK "YouTube.com"}
@{"Dailymotion.com" LINK "Dailymotion.com"}
@{"PeerTube" LINK "PeerTube"}
@{"Wasd.tv" LINK "Wasd.tv"}
@{"Radio" LINK "Radio"}
@{lindent 3}
The scripts are developed to be used in shell, but some of their feature can be used inside a browser by adding actions to link menus that would use those scripts with the link URL. 

The problem right now is that the supported networks, like Twitch.tv and Vimeo.com, do not render right at the available browsers. That's why you can use @{"aiostreams website" SYSTEM "c:URLOpen https://aiostreams.amiga-projects.net"} where you can find the same content from Twitch, but it works on every browser like IBrowse 2.5 and Aweb PPC.

@endnode
@node "Twitch.tv" "Twitch.tv"
@prev "Usage"
@{jleft}@{lindent 3}
@{b}Twitch.tv@{ub}

This script supports @{"Twitch.tv" SYSTEM "c:URLOpen https://www.twitch.tv"} website and it's available API. 
If you know the URL you can use it with the parameter @{b}-u, --url@{ub}. If not you can search for available streams with the parameter @{b}-sg, --search-game@{ub}.

With this script you can: 
* watch live streams
* watch channels' recorded videos
* search channels by game title that are live and streaming
* list available recorded videos by channel
* autoplay videos with ffplay, mplayer or other players

@{u}Shell parameters:@{uu}
  -h, --help            show this help message and exit
  -u URL, --url URL     The video/channel url. If this is found it will start
                        playing in your video player
  -q QUALITY, --quality QUALITY
                        Set the preffered video quality. This is optional. If
                        not set or if it is not available the default quality
                        weight will be used.
  -ts, --top-streams    Get a list of the current Top Live Streams, based on
                        the number of viewers
  -tg, --top-games      Get a list of the current Top Games with live streams
                        available, based on the number of viewers
  -sg SEARCHGAME, --search-game SEARCHGAME
                        Get game information based on its name
  -gv GAMEVIDEOS, --game-videos GAMEVIDEOS
                        Search for available streams based on game ID
  -cv, --channel-videos
                        Request the recorded videos of a channel. The -u
                        argument is mandatory.
  -shh, --silence       If this is set, the script will not output anything,
                        except of errors.
  -x, --extra-info      Show extra info in search results and video data

@{u}Available video qualities:@{uu}
At the vqw.py file you can set the weighted sort of the preffered video qualities. This means that the first available will be served. You can override the first one with the parameter @{b}-q, --quality@{ub}, even if it exists in an other position in the list.

@{lindent 3}
@{u}Examples:@{uu}
Watch a live channel streaming, like below
@{b}twitch.py -u "https://www.twitch.tv/channelname"@{ub}

Watch a recorded video, like below
@{b}twitch.py -u "https://www.twitch.tv/videos/1234567890"@{ub}

Watch a live channel streaming at specific video quality, if this is available, like below
@{b}twitch.py -u "https://www.twitch.tv/channelname" -q 720p@{ub}

Search for a keyword or a game title. Include the value in double quotes, like below:
@{b}twitch.py -sg "game title"@{ub}

Search for live streams for a specific game based on its ID. Use the @{b}-sg@{ub} or the @{b}-tg@{ub} to find the game IDs.
@{b}twitch.py -gv 123456789@{ub}

List the latest videos of a channel, like below
@{b}twitch.py -u "https://www.twitch.tv/channelname" -cv@{ub}

List the Top Games based on the viewers, like below
@{b}twitch.py -tg@{ub}

List the Top 50 Streams based on the viewers, like below
@{b}twitch.py -ts@{ub}

Get the available video resolutions like below,
@{b}youtube.py -u "https://www.twitch.tv/channelname" -x@{ub}
This will return something like
ID                      VCodec          ACodec      
----------------------------------------------------
audio_only              none            mp4a.40.2   
160p                    avc1.4D401F     mp4a.40.2   
360p                    avc1.4D401F     mp4a.40.2   
480p                    avc1.4D401F     mp4a.40.2   
720p60                  avc1.4D401F     mp4a.40.2   
1080p60__source_        avc1.64002A     mp4a.40.2

Use the ID number with the @{b}-q@{ub} argument when you request to watch a stream or video. Those ID's can be used at the vqw.py file to set the priorities for your system, in case you don't want to set it everytime on video playback.

@{u}Privacy:@{uu}
The script uses secure HTTPS URLs to access the AIO API and shares no personal information

@endnode
@node "Vimeo.com" "Vimeo.com"
@prev "Usage"
@{jleft}@{lindent 3}
@{b}Vimeo.com@{ub}

This script supports @{"Vimeo.com" SYSTEM "c:URLOpen https://vimeo.com"} website. If you know the URL you can use it with the parameter @{b}-u, --url@{ub}. 

With this script you can: 
* watch recorded videos
* autoplay videos with ffplay, mplayer or other players

@{u}Shell parameters:@{uu}
  -h, --help            show this help message and exit
  -u URL, --url URL     The video url from vimeo.com
  -q QUALITY, --quality QUALITY
                        Set the preffered video quality. This is optional. If
                        not set or if it is not available the default quality
                        weight will be used.
  -shh, --silence       If this is set, the script will not output anything,
                        except of errors.

@{u}Available video qualities:@{uu}
At the vqw.py file you can set the weighted sort of the preffered video qualities. This means that the first available will be served. You can override the first one with the parameter @{b}-q, --quality@{ub}, even if it exists in an other position in the list.
Usually, the recorded videos are available only on 720p resolution.

@{lindent 3}
@{u}Examples:@{uu}
Watch a recorded video, like below
@{b}vimeo.py -u https://vimeo.com/categoty/channelname/1234567890@{ub}
@{b}vimeo.py -u https://vimeo.com/1234567890@{ub}

Watch a recorded video at specific video quality, if this is available, like below
@{b}vimeo.py -u https://vimeo.com/1234567890 -q 720p@{ub}

@{u}Privacy:@{uu}
No private info is sent by this script to Vimeo.com.

@endnode
@node "YouTube.com" "YouTube.com"
@prev "Usage"
@{jleft}@{lindent 3}
@{b}YouTube.com@{ub}

This script supports @{"YouTube.com" SYSTEM "c:URLOpen https://youtube.com"} website. If you know the URL you can use it with the parameter @{b}-u, --url@{ub}. 

With this script you can: 
* watch live streams
* watch recorded videos. The protected videos are not supported yet
* search recorded videos and live streams based on given description
* autoplay videos with ffplay, mplayer or other players

@{u}Shell parameters:@{uu}
  -h, --help            show this help message and exit
  -u URL, --url URL     The video url
  -q QUALITY, --quality QUALITY
                        Set the preffered video quality. This is optional. If
                        not set or if it is not available the default quality
                        weight will be used.
  -sv SEARCHVIDEO, --search-video SEARCHVIDEO
                        Search recorded videos based on description
  -ss SEARCHSTREAMS, --search-streams SEARCHSTREAMS
                        Search live streams based on description
  -sc SEARCHCHANNEL, --search-channel SEARCHCHANNEL
                        Search channels based on description
  -shh, --silence       If this is set, the script will not output anything,
                        except of errors.
  -p PAGE, --page PAGE  Set the page of search results, so to get more videos.
                        This needs to be an integer greater than 0 and can be
                        used with -sv and -ss
  -x, --extra-info      Show extra info in search results and video data

@{u}Available video qualities:@{uu}
At the vqw.py file you can set the weighted sort of the preffered video qualities. This means that the first available will be served. You can override the first one with the parameter @{b}-q, --quality@{ub}, even if it exists in an other position in the list.
Usually, the recorded videos are available only on 720p and 360p resolution.

@{lindent 3}
@{u}Examples:@{uu}
Watch a recorded video, like below,
@{b}youtube.py -u "https://www.youtube.com/watch?v=1234567890"@{ub}

Watch a recorded video at specific video quality, if this is available, like below,
@{b}youtube.py -u "https://www.YouTube.com/watch?v=1234567890" -q 22@{ub}

Search for recorded videos. Include the search string in double quotes, like below,
@{b}youtube.py -sv "game title" @{ub}

Search for live streams. Include the search string in double quotes, like below,
@{b}youtube.py -ss "game title" @{ub}

Get the available video resolutions like below,
@{b}youtube.py -u "https://www.YouTube.com/watch?v=1234567890" -x@{ub}
This will return something like
ID      Height          VCodec          ACodec      
----------------------------------------------------
17      144             mp4v.20.3       mp4a.40.2   
160     144             avc1.4d400c     none        
278     144             vp9             none        
133     240             avc1.4d4015     none        
242     240             vp9             none        
134     360             avc1.4d401e     none        
18      360             avc1.42001E     mp4a.40.2 

Use the ID number with the @{b}-q@{ub} argument when you request to watch a video. Those ID's can be used at the vqw.py file to set the priorities for your system, in case you don't want to set it everytime on video playback.

Get channel RSS url
@{b}youtube.py -sc "channel info or content" @{ub}

@{u}Privacy:@{uu}
The script uses secure HTTPS URLs to access the YouTube.com API and shares with the network the following personal info:
* Your public IP

@endnode
@node "Dailymotion.com" "Dailymotion.com"
@prev "Usage"dlive
@{jleft}@{lindent 3}
@{b}Dailymotion.com@{ub}

This script supports @{"Dailymotion.com" SYSTEM "c:URLOpen https://www.dailymotion.com"} website. If you know the URL you can use it with the parameter @{b}-u, --url@{ub}. 

With this script you can: 
* watch recorded videos
* autoplay videos with ffplay, mplayer or other players

@{u}Shell parameters:@{uu}
  -h, --help            show this help message and exit
  -u URL, --url URL     The video url from Dailymotion.com
  -q QUALITY, --quality QUALITY
                        Set the preffered video quality. This is optional. If
                        not set or if it is not available the default quality
                        weight will be used.
  -shh, --silence       If this is set, the script will not output anything,
                        except of errors.

@{u}Available video qualities:@{uu}
At the vqw.py file you can set the weighted sort of the preffered video qualities. This means that the first available will be served. You can override the first one with the parameter @{b}-q, --quality@{ub}, even if it exists in an other position in the list.
Usually, the recorded videos are available only on 720p resolution.

@{lindent 3}
@{u}Examples:@{uu}
Watch a recorded video, like below
@{b}dailymotion.py -u https://www.dailymotion.com/video/x7iifgh@{ub}

Watch a recorded video at specific video quality, if this is available, like below
@{b}dailymotion.py -u https://www.dailymotion.com/video/x7iifgh -q 720@{ub}

@{u}Privacy:@{uu}
No private info is sent by this script to dailymotion.com.

@endnode
@node "PeerTube" "PeerTube"
@prev "Usage"
@{jleft}@{lindent 3}
@{b}PeerTube@{ub}

This script supports different @{"PeerTube" SYSTEM "c:URLOpen https://joinpeertube.org/"} instances websites. If you know the URL you can use it with the parameter @{b}-u, --url@{ub}. 

With this script you can: 
* watch recorded videos
* autoplay videos with ffplay, mplayer or other video players

@{u}Shell parameters:@{uu}
  -h, --help            show this help message and exit
  -u URL, --url URL     The video url from PeerTube instance
  -q QUALITY, --quality QUALITY
                        Set the preffered video quality. This is optional. If
                        not set or if it is not available the default quality
                        weight will be used.
  -shh, --silence       If this is set, the script will not output anything,
                        except of errors.

@{u}Available video qualities:@{uu}
At the vqw.py file you can set the weighted sort of the preffered video qualities. This means that the first available will be served. You can override the first one with the parameter @{b}-q, --quality@{ub}, even if it exists in an other position in the list.

@{lindent 3}
@{u}Examples:@{uu}
Watch a recorded video, like below
@{b}peertube.py -u https://peertube.co.uk/videos/watch/c9eefbff-4207-4947-8000-000f9856af11@{ub}

@{u}Privacy:@{uu}
No private info is sent by this script to PeerTube instances.

@endnode

@node "wasd.tv" "wasd.tv"
@prev "Usage"
@{jleft}@{lindent 3}
@{b}Wasd.tv@{ub}

This script supports @{"wasd.tv" SYSTEM "c:URLOpen https://wasd.tv"} website. If you know the URL you can use it with the parameter @{b}-u, --url@{ub}. 

With this script you can: 
* watch recorded videos
* watch live stream
* autoplay videos with ffplay, mplayer or other players

@{u}Shell parameters:@{uu}
  -h, --help            show this help message and exit
  -u URL, --url URL     The video/channel url
  -q QUALITY, --quality QUALITY
                        Set the preffered video quality. This is optional. If
                        not set or if it is not available the default quality
                        weight will be used.
  -tg, --top-games      Get a list of the current Top Games with live streams
                        available, based on the number of viewers
  -sg SEARCHGAME, --search-game SEARCHGAME
                        Search for available streams based on game title/id
  -shh, --silence       If this is set, the script will not output anything,
                        except of errors.

@{u}Available video qualities:@{uu}
At the vqw.py file you can set the weighted sort of the preffered video qualities. This means that the first available will be served. You can override the first one with the parameter @{b}-q, --quality@{ub}, even if it exists in an other position in the list.

@{lindent 3}
@{u}Examples:@{uu}
Watch a recorded video, like below
@{b}wasd.py -u https://wasd.tv/channel/123456/videos/123456@{ub}

Watch the live stream, like below
@{b}wasd.py -u https://wasd.tv/channel/123456@{ub}

@{u}Privacy:@{uu}
No private info is sent by this script to wasd.tv.

@endnode

@node "Radio" "Radio"
@prev "Usage"
@{jleft}@{lindent 3}
@{b}Radio@{ub}

This script provides information and plays automatically online radio stations. You can search for radio stations based on Country, Language, Genre and name.

With this script you can: 
* search for radio stations based on Country, Language, Genre and name
* autoplay radio stations
* get information for a radio station
* get a list of available countries and the number of stations for them

@{u}Shell parameters:@{uu}
  -h, --help            show this help message and exit
  -lc, --list-countries
                        List the available countries
  -src, --search        Initiate search for radio stations
  -pl, --play           Automatically play a radio station. Use --uuid to set
                        the station.
  -sn STATIONNAME, --station-name STATIONNAME
                        Filter stations based on name. This is used with
                        --search argument.
  -sg STATIONGENRE, --station-genre STATIONGENRE
                        Filter stations based on genre. This is used with
                        --search argument.
  -sc STATIONCOUNTRY, --station-country STATIONCOUNTRY
                        Filter stations based on country. This is used with
                        --search argument.
  -sl STATIONLANGUAGE, --station-language STATIONLANGUAGE
                        Filter stations based on language. This is used with
                        --search argument.
  -id STATIONUUID, --uuid STATIONUUID
                        Autoplay the station based on the UUID. This is used
                        with --play argument.
  -shh, --silence       If this is set, the script will not output anything,
                        except of errors.

@{lindent 3}
@{u}Examples:@{uu}
List available countries
@{b}radio.py -lc@{ub}

Search for radio stations in United States playing country
@{b}radio.py -src -sg country -sc "United States"@{ub}

Search for radio stations in Great Britain playing rock speaking English
@{b}radio.py -src -sl English -sg rock -sc Britain@{ub}

Search for radio stations having "Planet" in their name
@{b}radio.py -src -sn "Planet"@{ub}

Play Planet Rock station
@{b}radio.py -pl -id 9619cc6c-0601-11e8-ae97-52543be04c81@{ub}

@{u}Privacy:@{uu}
No private info is sent by this script.

@endnode

@node "Todo" "Todo"
@prev "Usage"
@next "Changelog"
@{jleft}@{lindent 3}
@{b}Todo list@{ub}

The todo list is something that might change a lot between the version releases. You can find the up to date todo list and the status of things I am working on, at:
https://github.com/walkero-gr/aiostreams/projects/1 @{"open" SYSTEM "c:URLOpen https://github.com/walkero-gr/aiostreams/projects/1"}

Many things, like:
* AmigaOS 3 and AROS support.
* Workbench notifications, wherever it is possible.
* A way to get a notification on which of your favorite channels are currently streaming.

If you have any websites that you would like to be supported, please contact me and I will check if this is possible. Please, don't ask for Amazon Prime, HBO, Netflix etc.. They do not provide the necessary APIs to be used outside their websites.

@endnode
@node "Changelog" "Changelog"
@prev "Todo"
@next "Troubleshooting"
@{jleft}@{lindent 3}
@{b}Changelog@{ub}

v1.7.8
* Changed the youtube script to support urls like https://youtu.be/AbcdefghiJk
* Changed the youtube script to return an error message when the url is not compatible
* Fixed the version string removing the double "vv"
* Fixed the youtube script when searching for videos to not crash when the results do not have a videoid

v1.7.7
* The youtube script supports now the urls of shorts videos
* Added video resolutions at the youtube script, when the `-x` argument is used
* Added more resolutions selection in the `vqw.py` for Vimeo and twitch
* The youtube script supports more urls, to cover more Invidious servers

v1.7.6
* Added some extra info in the amigaguide file for the youtube script
* Added pagination to youtube script with the new argument -p/--page
* Updated the scripts to work with python3
* Now the -x argument in youtube and twitch script prints out the extra info but
  doesn't start the video playback
* Removed the skaitv, lbry and dlive scripts as they are not working and they
  need a rewrite

v1.7.5
* Added -sc argument to the youtube script which can be used to search for
  YouTube channels based on the given description. This returns a list of
  channels titles and their feed URLs
* Added support for https://yewtu.be invidious server in YouTube script
* Fixed dlive script
* Fixed peertube script
* Fixed lbrytv script to support odysee.com videos as well
* Fixed vimeo script

v1.7.4
* Did a fix in YouTube script to avoid SB videos. This was breaking the video
  selection.
* Fixed the video throttle in YouTube videos. So now the videos seem to play
  smoothly.

v1.7.3
* Added a new argument on Youtube script, the -x, that enables extra info
  on search results and videos
* Updated the Twitch script to use AIO API to get all the data. AIO API
  works with the latest Twitch API

v1.7.2
* A lot of changes to make YouTube work again. There were changes to vqw.py 
  file, so first backup the one you use

v1.7.1
* Changes on skaitv script to use aiostreams api site
* Added new radio script

v1.7
* Fixed skaitv live script
* Removed Mixer.com script as it shut down

v1.6.2
* Added automated release process to OS4Depot and Aminet

v1.6.1
* Fixed Lbry.tv under AmigaOS 4 to use ffplay and not mplayer on video playback

v1.6
* Added Lbry.tv script
* Cleared unused variables from scripts
* Fixed Vimeo script to support Videos with GUID

v1.5
* Added Wasd.tv script
* Added PeerTube script
* Fixed skaitv.py script to support the latest changes of the website
* Changed the place of the video qualities lists by separating them from the configuration file to a new file named vqw.py
* Added a full changelog file
* Changed the scripts' descriptions on help request

v1.4.2
* Twitch script uses Twitch API v5
* Twitch script uses aiostreams API as a workaround fix of streams that were not working before because of unicode channel names.

v1.4.1
* Changes on dlive script to support AmigaOS 4 and MorphOS. Now you can watch streams and videos on your beloved systems
* A change on twitch script to be usable with Emotion player under AmigaOS 4

v1.4
* Dlive.tv script added
* MorphOS 3.x, MacOS X and Linux systems are now supported with autoplay
* Various fixes

v1.3
* YouTube.com script added
* If the running system is not AmigaOS 4, the returned texts show unicode characters. Otherwise they are stripped
* Skaitv.gr script updated to support some archived videos and live stream
* Fixed a config file bug
* Fixed a bug in Twitch script
    File "twitch.py", line 192, in getPrefferedVideoURL
    if (quality == playlists[idx]['video']):

v1.2
* Vimeo.com script added
* Dailymotion.com script added
* Skaitv.gr script added
* simplem3u8 parser updated to support URLs starting with "../"
* Added links in the AmigaGuide file, that use URLOpen
* Added the silence parameter, that prevents the script to output anything, except the errors or the results of a search
* Documentation updated
* Removed version per script
* Added Top Games list in twitch.py script. This returns the 50 Top Games based on the number of viewers.
* Added Top Streams list in twitch.py script. This returns the 50 Top Streams based on the number of viewers.
* Increased game search results list to 50 items in twitch.py script.

v1.1
* Mixer.com script added
* Cleared a lot of code in twitch.py script
* Documentation updated

v1.0
* Initial release
* Twitch.tv script added
* Simple m3u8 parser created

@endnode
@node "Troubleshooting" "Troubleshooting"
@prev "Changelog"
@next "Author"
@{jleft}@{lindent 3}
@{b}Troubleshooting@{ub}

@{i}* The file is not executable (AmigaOS)@{ui}
Sometimes the "Script" bit of the scripts are removed by LHA or by GIT. The result is to not be able to run the scripts by using only the filename. Try to use as a prefix the @{b}python@{ub} command. This will force the script to run with python.

Use icon information to set the "Script" bit to on (checked).

@{i}* bash: ./dlive.py: python: bad interpreter: No such file or directory (Linux)@{ui}
This means that it can't find the python command on your system. Try to use @{b}python@{ub} or @{b}python2@{ub} as a prefix.

@endnode
@node "Author" "Author"
@prev "Troubleshooting"
@{jleft}@{lindent 3}
@{b}Author@{ub}

You can reach me at Amiga forums under the username @{b}walkero@{ub}.

The project is open source and you can find the code at:
https://github.com/walkero-gr/aiostreams @{"github" SYSTEM "c:URLOpen https://github.com/walkero-gr/aiostreams"}

If you have any request or you would like to report a problem you discovered, go to:
https://github.com/walkero-gr/aiostreams/issues @{"issues" SYSTEM "c:URLOpen https://github.com/walkero-gr/aiostreams/issues"}

You can read my blog at:
https://walkero.gr @{"open" SYSTEM "c:URLOpen https://walkero.gr"}

My Twitter account is:
https://twitter.com/gsokianos @{"open" SYSTEM "c:URLOpen https://twitter.com/gsokianos"}

aiostreams is DONATIONWARE. If you find this project useful, you can support it by donating at:
https://ko-fi.com/walkero @{"Donate" SYSTEM "c:URLOpen https://ko-fi.com/walkero"}

My PeerTube channels:
https://peertube.co.uk/accounts/walkero/video-channels @{"open" SYSTEM "c:URLOpen https://peertube.co.uk/accounts/walkero/video-channels"}

@endnode

